:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/modules/minimp3/doc_classes/AudioStreamMP3.xml.

.. _class_AudioStreamMP3:

AudioStreamMP3
==============

**Inherits:** :ref:`AudioStream<class_AudioStream>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

MP3 audio stream driver.

Description
-----------

MP3 audio stream driver. See :ref:`data<class_AudioStreamMP3_property_data>` if you want to load an MP3 file at run-time.

Properties
----------

+-----------------------------------------------+---------------------------------------------------------------+-----------------------+
| :ref:`int<class_int>`                         | :ref:`bar_beats<class_AudioStreamMP3_property_bar_beats>`     | ``4``                 |
+-----------------------------------------------+---------------------------------------------------------------+-----------------------+
| :ref:`int<class_int>`                         | :ref:`beat_count<class_AudioStreamMP3_property_beat_count>`   | ``0``                 |
+-----------------------------------------------+---------------------------------------------------------------+-----------------------+
| :ref:`float<class_float>`                     | :ref:`bpm<class_AudioStreamMP3_property_bpm>`                 | ``0.0``               |
+-----------------------------------------------+---------------------------------------------------------------+-----------------------+
| :ref:`PackedByteArray<class_PackedByteArray>` | :ref:`data<class_AudioStreamMP3_property_data>`               | ``PackedByteArray()`` |
+-----------------------------------------------+---------------------------------------------------------------+-----------------------+
| :ref:`bool<class_bool>`                       | :ref:`loop<class_AudioStreamMP3_property_loop>`               | ``false``             |
+-----------------------------------------------+---------------------------------------------------------------+-----------------------+
| :ref:`float<class_float>`                     | :ref:`loop_offset<class_AudioStreamMP3_property_loop_offset>` | ``0.0``               |
+-----------------------------------------------+---------------------------------------------------------------+-----------------------+

Property Descriptions
---------------------

.. _class_AudioStreamMP3_property_bar_beats:

- :ref:`int<class_int>` **bar_beats**

+-----------+----------------------+
| *Default* | ``4``                |
+-----------+----------------------+
| *Setter*  | set_bar_beats(value) |
+-----------+----------------------+
| *Getter*  | get_bar_beats()      |
+-----------+----------------------+

----

.. _class_AudioStreamMP3_property_beat_count:

- :ref:`int<class_int>` **beat_count**

+-----------+-----------------------+
| *Default* | ``0``                 |
+-----------+-----------------------+
| *Setter*  | set_beat_count(value) |
+-----------+-----------------------+
| *Getter*  | get_beat_count()      |
+-----------+-----------------------+

----

.. _class_AudioStreamMP3_property_bpm:

- :ref:`float<class_float>` **bpm**

+-----------+----------------+
| *Default* | ``0.0``        |
+-----------+----------------+
| *Setter*  | set_bpm(value) |
+-----------+----------------+
| *Getter*  | get_bpm()      |
+-----------+----------------+

----

.. _class_AudioStreamMP3_property_data:

- :ref:`PackedByteArray<class_PackedByteArray>` **data**

+-----------+-----------------------+
| *Default* | ``PackedByteArray()`` |
+-----------+-----------------------+
| *Setter*  | set_data(value)       |
+-----------+-----------------------+
| *Getter*  | get_data()            |
+-----------+-----------------------+

Contains the audio data in bytes.

You can load a file without having to import it beforehand using the code snippet below. Keep in mind that this snippet loads the whole file into memory and may not be ideal for huge files (hundreds of megabytes or more).


.. tabs::

 .. code-tab:: gdscript

    func load_mp3(path):
        var file = File.new()
        file.open(path, File.READ)
        var sound = AudioStreamMP3.new()
        sound.data = file.get_buffer(file.get_length())
        file.close()
        return sound

 .. code-tab:: csharp

    public AudioStreamMP3 LoadMP3(string path)
    {
        var file = new File();
        file.Open(path, File.READ);
        var sound = new AudioStreamMP3();
        sound.Data = file.GetBuffer(file.GetLength());
        file.Close();
        return sound;
    }



----

.. _class_AudioStreamMP3_property_loop:

- :ref:`bool<class_bool>` **loop**

+-----------+-----------------+
| *Default* | ``false``       |
+-----------+-----------------+
| *Setter*  | set_loop(value) |
+-----------+-----------------+
| *Getter*  | has_loop()      |
+-----------+-----------------+

If ``true``, the stream will automatically loop when it reaches the end.

----

.. _class_AudioStreamMP3_property_loop_offset:

- :ref:`float<class_float>` **loop_offset**

+-----------+------------------------+
| *Default* | ``0.0``                |
+-----------+------------------------+
| *Setter*  | set_loop_offset(value) |
+-----------+------------------------+
| *Getter*  | get_loop_offset()      |
+-----------+------------------------+

Time in seconds at which the stream starts after being looped.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
